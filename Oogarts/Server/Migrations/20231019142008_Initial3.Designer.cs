// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oogarts.Server.Data;

#nullable disable

namespace Oogarts.Server.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231019142008_Initial3")]
    partial class Initial3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtsSpecialisatie", b =>
                {
                    b.Property<Guid>("ArtsenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialisatiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtsenId", "SpecialisatiesId");

                    b.HasIndex("SpecialisatiesId");

                    b.ToTable("ArtsSpecialisatie");

                    b.HasData(
                        new
                        {
                            ArtsenId = new Guid("dc2259c9-bc34-4f7e-a141-5a2bf0150339"),
                            SpecialisatiesId = new Guid("d657a337-8657-4fa6-b23d-d731fa39ca8f")
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Afspraak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Afspraken");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Arts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GebruikerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId")
                        .IsUnique();

                    b.ToTable("Artsen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc2259c9-bc34-4f7e-a141-5a2bf0150339"),
                            GebruikerId = new Guid("d9b56e0c-a80d-4216-ad35-817d30da130e"),
                            ProfilePicture = "https://www.isala.nl/media/21457/tyljwm.jpg?center=0.5431%2c0.5117&mode=crop&width=200&height=200&quality=80&token=XzIQb4Q6IY"
                        },
                        new
                        {
                            Id = new Guid("cdda13ac-8fc8-4f13-83a9-7b4d112ad1dd"),
                            GebruikerId = new Guid("538938e2-2b7e-4d2c-9607-65709d989a73"),
                            ProfilePicture = "https://www.isala.nl/media/21457/tyljwm.jpg?center=0.5431%2c0.5117&mode=crop&width=200&height=200&quality=80&token=XzIQb4Q6IY"
                        },
                        new
                        {
                            Id = new Guid("60035248-0582-426d-b097-21a2d4c7b423"),
                            GebruikerId = new Guid("54d0854c-bcb2-45c2-bae5-26431fe2b88a"),
                            ProfilePicture = "https://www.isala.nl/media/21457/tyljwm.jpg?center=0.5431%2c0.5117&mode=crop&width=200&height=200&quality=80&token=XzIQb4Q6IY"
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Gebruiker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9b56e0c-a80d-4216-ad35-817d30da130e"),
                            Naam = "Artsnaam",
                            Voornaam = "Artsachternaam"
                        },
                        new
                        {
                            Id = new Guid("538938e2-2b7e-4d2c-9607-65709d989a73"),
                            Naam = "Artsnaam2",
                            Voornaam = "Artsvoornaam2"
                        },
                        new
                        {
                            Id = new Guid("54d0854c-bcb2-45c2-bae5-26431fe2b88a"),
                            Naam = "Artsnaam3",
                            Voornaam = "Artsvoornaam3"
                        },
                        new
                        {
                            Id = new Guid("616d2343-31a0-4090-8bf6-57e0db45a12a"),
                            Naam = "Secretatiaatvoornaam",
                            Voornaam = "Secretatiaatachternaam"
                        },
                        new
                        {
                            Id = new Guid("5fd01c05-709f-4b2f-ab1f-582dd6774291"),
                            Naam = "Patientvoornaam",
                            Voornaam = "Patientachternaam"
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Oogziekte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Oogziektes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b6fc6ba-5715-4d90-80ad-b85fdd9e46b2"),
                            Beschrijving = "beschrijving 1",
                            Titel = "oogziekte 1"
                        },
                        new
                        {
                            Id = new Guid("cebe0407-5838-4c85-ab87-323bd4e3ed5d"),
                            Beschrijving = "beschrijving 2",
                            Titel = "oogziekte 2"
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GebruikerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Huisnummer")
                        .HasColumnType("int");

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId")
                        .IsUnique();

                    b.ToTable("Patienten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9826304c-52e8-4bf7-ac6b-7cf95adb1428"),
                            GeboorteDatum = new DateTime(2002, 10, 24, 16, 20, 7, 865, DateTimeKind.Local).AddTicks(6353),
                            GebruikerId = new Guid("5fd01c05-709f-4b2f-ab1f-582dd6774291"),
                            Huisnummer = 12,
                            Postcode = 9000,
                            Stad = "Gent",
                            Straat = "Langestraat"
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Secretariaat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GebruikerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId")
                        .IsUnique();

                    b.ToTable("Secretatiaten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a27c932-1632-4d5a-b419-669a97f9c116"),
                            GebruikerId = new Guid("616d2343-31a0-4090-8bf6-57e0db45a12a")
                        });
                });

            modelBuilder.Entity("Oogarts.Server.Models.Specialisatie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialisatie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d657a337-8657-4fa6-b23d-d731fa39ca8f"),
                            Naam = "Specialisatie 1"
                        });
                });

            modelBuilder.Entity("ArtsSpecialisatie", b =>
                {
                    b.HasOne("Oogarts.Server.Models.Arts", null)
                        .WithMany()
                        .HasForeignKey("ArtsenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oogarts.Server.Models.Specialisatie", null)
                        .WithMany()
                        .HasForeignKey("SpecialisatiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Oogarts.Server.Models.Afspraak", b =>
                {
                    b.HasOne("Oogarts.Server.Models.Arts", "Arts")
                        .WithMany("Afspraken")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Oogarts.Server.Models.Patient", "Patient")
                        .WithMany("Afspraken")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Arts");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Arts", b =>
                {
                    b.HasOne("Oogarts.Server.Models.Gebruiker", "Gebruiker")
                        .WithOne("Arts")
                        .HasForeignKey("Oogarts.Server.Models.Arts", "GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Patient", b =>
                {
                    b.HasOne("Oogarts.Server.Models.Gebruiker", "Gebruiker")
                        .WithOne("Patient")
                        .HasForeignKey("Oogarts.Server.Models.Patient", "GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Secretariaat", b =>
                {
                    b.HasOne("Oogarts.Server.Models.Gebruiker", "Gebruiker")
                        .WithOne("Secretariaat")
                        .HasForeignKey("Oogarts.Server.Models.Secretariaat", "GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Arts", b =>
                {
                    b.Navigation("Afspraken");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Gebruiker", b =>
                {
                    b.Navigation("Arts");

                    b.Navigation("Patient");

                    b.Navigation("Secretariaat");
                });

            modelBuilder.Entity("Oogarts.Server.Models.Patient", b =>
                {
                    b.Navigation("Afspraken");
                });
#pragma warning restore 612, 618
        }
    }
}
